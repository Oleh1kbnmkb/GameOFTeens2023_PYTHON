import logging
from keyboards import *
from site_url import tar1
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage


bot = Bot(token='6218827645:AAGX4szbc3raeGnkxcp2MStPqE4nCx7y-Nk')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)




# 1. –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –º–µ—Ç–∏ –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
  await message.answer("–ü—Ä–∏–≤—ñ—Ç! üòä –Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –≤–∏–±–æ—Ä—ñ —Ç–∞—Ä–∏—Ñ—É –≤—ñ–¥ lifecell. üì±üíô –ú–æ—è –º–µ—Ç–∞ - –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º —Ç–≤–æ—ó–º –ø–æ—Ç—Ä–µ–±–∞–º. üéØüîé –Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É <u>–ü–æ—ó—Ö–∞–ª–∏</u>! üöÄ\n\nP.S.: –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ —Ç–∞—Ä–∏—Ñ–∏ —Ç–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ <b><a href='https://www.lifecell.ua/mobilnij-zvyazok/taryfy/'>Lifecell</a></b>. üòâ‚ú®", parse_mode='html', disable_web_page_preview=1, reply_markup=question1)




# 2. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
@dp.message_handler(commands=['–ü–æ—ó—Ö–∞–ª–∏']) 
async def get_answer(message: types.Message, state: FSMContext): 
  question1 = "–•—Ç–æ —î —Ç–≤–æ—ó–º –ø–æ—Ç–æ—á–Ω–∏–º –º–æ–±—ñ–ª—å–Ω–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º? üì±üíº\n\n"\
              "1. lifecell üíô\n"\
              "2. –ö–∏—ó–≤—Å—Ç–∞—Ä üåü\n"\
              "3. Vodafone üî¥\n"
   
   
  await message.answer('–Ø —Ç–æ–±—ñ –∑–∞–¥–∞–º –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å, —â–æ–± –≤—ñ–¥–Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±–µ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–∞—Ä–∏—Ñ–∏ lifecell!', reply_markup=question2) 
   
  await message.answer(question1) 
  await state.set_state('not_goods') 
@dp.message_handler(state='not_goods') 
async def not_goods(message: types.Message, state: FSMContext):   
  if (message.text == '2'):   
    await message.answer('–í–∏ –æ–±—Ä–∞–ª–∏ —â–æ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ Lifecell —Ç–æ–º—É –ø—Ä–∏–¥–±–∞–π—Ç–µ –∫–∞—Ä—Ç–∫—É Lifecell –∞–±–æ –æ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ö–∏—ó–≤—Å—Ç–∞—Ä - https://t.me/Kyivstar_Ukraine ') 
  elif (message.text == '3'): 
    await message.answer('–í–∏ –æ–±—Ä–∞–ª–∏ —â–æ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ Lifecell —Ç–æ–º—É –ø—Ä–∏–¥–±–∞–π—Ç–µ –∫–∞—Ä—Ç–∫—É Lifecell –∞–±–æ –æ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Vodafone - @VFUkraineBot ')     
  dp.register_message_handler(get_answer) 
  await state.set_state('answer_2')
  





# 3. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç—Ä–µ–±–∏
@dp.message_handler(state='answer_2')
async def answer_2(message: types.Message, state: FSMContext):
  quest2 = "–Ø–∫—ñ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É —î –¥–ª—è —Ç–µ–±–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–º–∏? üì≤‚ú® –í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.üëáüèº\n\n"\
            "1. –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏ üìûüí¨\n"\
            "2. –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏ –∞–±–æ —Ä–æ—É–º—ñ–Ω–≥ üåçüìû\n"\
            "3. –í–µ–ª–∏–∫–∏–π –æ–±—Å—è–≥ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ—ñ–∫—É üåêüíª\n"\
            "4. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ üõ°Ô∏èüíº\n"\
            "5. –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–≤–∫–∞–∂–∏ —Å–≤–æ—ó –≤–∞—Ä—ñ–∞–Ω—Ç–∏) ‚ú®üîç"

  await message.answer(quest2)
  dp.register_message_handler(answer_2)
  await state.set_state('answer_3')
  
  
  
# 4. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
@dp.message_handler(state='answer_3')
async def answer_3(message: types.Message, state: FSMContext):
  quest3 = "–Ø–∫ —á–∞—Å—Ç–æ —Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –º–æ–±—ñ–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫? üì≤üïí\n\n"\
          "1. –ê–∫—Ç–∏–≤–Ω–æ –∫–æ—Ä–∏—Å—Ç—É—é—Å—è üöÄüìû\n"\
          "2. –Ü–Ω–æ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É—é—Å—è üå§Ô∏èüì±\n"\
          "3. –†—ñ–¥–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é ‚è≥üìµ"
  await message.answer(quest3, reply_markup=question3)
  dp.register_message_handler(answer_3)
  await state.set_state('answer_4')
  
  
  
# 5. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–±—ñ–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç
@dp.message_handler(state='answer_4')
async def answer_4(message: types.Message, state: FSMContext):
  quest4 ="–Ø–∫–∏–º —î —Ç–≤—ñ–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫? üí∞üì≤\n\n"\
          "1. –î–æ 100 –≥—Ä–∏–≤–µ–Ω—å –Ω–∞ –º—ñ—Å—è—Ü—å üí∏üíØ\n"\
          "2. –í—ñ–¥ 100 –¥–æ 300 –≥—Ä–∏–≤–µ–Ω—å –Ω–∞ –º—ñ—Å—è—Ü—å üí∏üí∞\n"\
          "3. –ü–æ–Ω–∞–¥ 300 –≥—Ä–∏–≤–µ–Ω—å –Ω–∞ –º—ñ—Å—è—Ü—å üí∏üí≤"
             
  await message.answer(quest4, reply_markup=question4)
  dp.register_message_handler(answer_4)
  await state.set_state('answer_5')
  
   
   
# 6. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ —î –º–µ–Ω—à –≤–∞–∂–ª–∏–≤–∏–º–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(state='answer_5')
async def answer_5(message: types.Message, state: FSMContext):
  quest5 ="–Ø–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ –ø–æ—Å–ª—É–≥–∏ —î –¥–ª—è —Ç–µ–±–µ –º–µ–Ω—à –≤–∞–∂–ª–∏–≤–∏–º–∏? ü§îüì≤\n\n"\
          "1. –ú–æ–±—ñ–ª—å–Ω–∏–π –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç üåêüíª\n"\
          "2. –í–∏—Å–æ–∫–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤ üí∏üìû\n"\
          "3. –ù–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–æ—É–º—ñ–Ω–≥—É üåçüîå\n"\
          "4. –û–±–º–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏ –≤ –ø–µ–≤–Ω—ñ —á–∞—Å–∏ ‚è∞üîí" 
            
  await message.answer(quest5, reply_markup=question5)
  await state.set_state('goods')
  


# –ü—ñ–¥–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(state='goods')
async def goods(message: types.Message, state: FSMContext):
  if message.text == "–ú–æ–±—ñ–ª—å–Ω–∏–π –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç üåêüíª":
    await message.answer('–û—Å—å 4 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–≤–æ—ó–º –ø–æ—Ç—Ä–µ–±–∞–º: ', reply_markup=taf1)
  elif message.text == "–í–∏—Å–æ–∫–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤ üí∏üìû":
    await message.answer('–û—Å—å 5 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–≤–æ—ó–º –ø–æ—Ç—Ä–µ–±–∞–º: ', reply_markup=taf2)
  elif message.text == "–ù–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–æ—É–º—ñ–Ω–≥—É üåçüîå":
    await message.answer('–û—Å—å 3 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–≤–æ—ó–º –ø–æ—Ç—Ä–µ–±–∞–º: ', reply_markup=taf3)
  elif message.text == "–û–±–º–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏ –≤ –ø–µ–≤–Ω—ñ —á–∞—Å–∏ ‚è∞üîí":
    await message.answer('–û—Å—å 3 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–≤–æ—ó–º –ø–æ—Ç—Ä–µ–±–∞–º: ', reply_markup=taf4)
  await state.set_state('tarif')
  
  
  
  
@dp.callback_query_handler(state='*', text='0')
async def end_reading(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ —â–µ —Ä–∞–∑ - –Ω–∞–ø–∏—à—ñ—Ç—å /start')
    await state.finish()
    
  

@dp.callback_query_handler(state='tarif')
async def get_tarif_info(callback_query: types.CallbackQuery):
    if callback_query.data in tar1.keys():
       await bot.send_photo(callback_query.message.chat.id, tar1[callback_query.data]["photo"])
       price = tar1[callback_query.data]['price']
       name = tar1[callback_query.data]['name']
       url= tar1[callback_query.data]["site_url"]
       message = f"<b>–ù–∞–∑–≤–∞: </b> {name}\n<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç: </b> {url}\n<b>–¶—ñ–Ω–∞ —Ç–∞—Ä–∏—Ñ—É: </b> {price}" 
       await bot.send_message(callback_query.message.chat.id, message, parse_mode="html")
    else:
       await bot.send_message(callback_query.message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–∞–∂–∞–ª—å –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñüòü")




if __name__ == "__main__":
  executor.start_polling(dp)